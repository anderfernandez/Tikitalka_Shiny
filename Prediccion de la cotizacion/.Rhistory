if (!libs %in% installed.packages()) install.packages(libs)
libs = c("httr","shiny","jsonlite")
if (!libs %in% installed.packages()) install.packages(libs)
for(i  in libs){print(1)}
for(i  in libs){print(1); i=i+1}
for(i  in libs){print(i)}
for(i in libs){
if (!i %in% installed.packages()) install.packages(i)
}
apply(libs, require)
sapply(libs, require)
lapply(libs, require)
sapply(libs, require, character.only = TRUE)
url = "https://finnhub.io/api/v1/stock/symbol?exchange=US&token=bq8922frh5rc96c0gnfg"
resp = GET(url)
resp
fromJSON(content(resp))
fromJSON(content(resp, type = "text"))
fromJSON(content(resp, type = "text", encoding = "UTF-8"))
codigos = fromJSON(content(resp, type = "text", encoding = "UTF-8"))
codigos
codigos[codigos$description!= "",]
codigos = codigos[codigos$description!= "",]
runApp()
as.POSIXct(today()-1)
as.POSIXct(Sys.Date()-1)
as.POSIXct(Sys.time()-1)
as.numeric(as.POSIXct(Sys.time()-1))
fecha_inicio =  as.numeric(as.POSIXct(Sys.time()-1))
fecha_fin = as.numeric(as.POSIXct(Sys.time()-366))
url = pasteo("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&from=",fecha_inicio,"&to=",fecha_fin",&token=bq8922frh5rc96c0gnfg")
url = pasteo("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&from=",fecha_inicio,"&to=",fecha_fin,"&token=bq8922frh5rc96c0gnfg")
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&from=",fecha_inicio,"&to=",fecha_fin,"&token=bq8922frh5rc96c0gnfg")
simbolo = "APPL"
fecha_inicio = as.numeric(as.POSIXct(Sys.time()-366))
fecha_fin =  as.numeric(as.POSIXct(Sys.time()-1))
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&from=",fecha_inicio,"&to=",fecha_fin,"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
resp
fromJSON(content(URL, type = "text", encoding = "UTF-8"))
fromJSON(content(resp, type = "text", encoding = "UTF-8"))
fromJSON(content(resp))
content(resp)
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
fromJSON(content(resp))
fromJSON(content(resp, type = "text"))
fecha_inicio = as.numeric(as.POSIXct(Sys.time()-365))
fecha_fin =  as.numeric(as.POSIXct(Sys.time()-1))
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
fromJSON(content(resp, type = "text"))
fecha_inicio = as.numeric(as.POSIXct(Sys.time()-360))
fecha_fin =  as.numeric(as.POSIXct(Sys.time()-5))
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
fromJSON(content(resp, type = "text"))
resp
simbolo = "AAPL"
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
fromJSON(content(resp, type = "text"))
data = fromJSON(content(resp, type = "text"))
lenght(data)
length(data)
head(data[[1]])
head(data[[2]])
head(data[[3]])
dim(data[[1]])
length(data[[1]])
length(data[[6]])
head(data[[6]])
datos = data.frame(cotizacion = data[[1]], timestamp = data[[6]])
unix_to_date = function(date, origin = "1970-01-01"){as.POSIXct(date, origin=origin)}
unix_to_date(datos$timestamp[1])
unix_to_date(datos$timestamp[2])
unix_to_date(datos$timestamp[6])
sapply(datos$timestamp, unix_to_date)
as.POSIXct(datos$timestamp)
as.POSIXct(datos$timestamp, origin = "1970-01-01")
rm(unix_to_date())
rm(unix_to_date)
datos$timestamp = as.POSIXct(datos$timestamp, origin = "1970-01-01")
plot(datos$cotizacion, type = "l")
libs = c("httr","shiny","jsonlite","ggplot2")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
datos %>%
ggplot(aes(timestamp, cotizacion)) + geom_line() + theme_minimal()
ggplot(datos, aes(timestamp, cotizacion)) + geom_line() + theme_minimal()
libs = c("httr","shiny","jsonlite","ggplot2","plotly")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
g = ggplot(datos, aes(timestamp, cotizacion)) + geom_line() + theme_minimal()
ggplotly(g)
runApp()
runApp()
runApp()
View(codigos)
simbolo = "A"
fecha_inicio = as.numeric(as.POSIXct(Sys.time()-360))
fecha_fin =  as.numeric(as.POSIXct(Sys.time()-5))
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
data = fromJSON(content(resp, type = "text"))
#Nos quedamos con la cotización y timestamp
datos = data.frame(cotizacion = data[[1]], timestamp = data[[6]])
libs = c("httr","shiny","jsonlite","ggplot2","plotly","timetk")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
install.packages(i)
install.packages(i)
splits <- datos %>%
time_series_split(assess = "3 months", cumulative = TRUE)
libs = c("httr","shiny","jsonlite","ggplot2","plotly","timetk","dplyr)
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
# Obtenemos las empresas
url = "https://finnhub.io/api/v1/stock/symbol?exchange=US&token=bq8922frh5rc96c0gnfg"
resp = GET(url)
codigos = fromJSON(content(resp, type = "text", encoding = "UTF-8"))
codigos = codigos[codigos$description!= "",]
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Predicción de cotización"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("company",
"Selecciona la empresa:",
choices = codigos$description
),
actionButton("boton",label = "Analizar")
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
datos_cotizacion = eventReactive(input$boton ,{
# Obtenemos el código de la empresa
empresa = input$company
simbolo = codigos$displaySymbol[codigos$description == empresa]
# Construimos URL + petición
fecha_inicio = as.numeric(as.POSIXct(Sys.time()-360))
fecha_fin =  as.numeric(as.POSIXct(Sys.time()-5))
url = paste0("https://finnhub.io/api/v1/stock/candle?symbol=",simbolo,
"&resolution=1&from=",fecha_inicio,"&to=",fecha_fin,
"&token=bq8922frh5rc96c0gnfg")
resp = GET(url)
data = fromJSON(content(resp, type = "text"))
#Nos quedamos con la cotización y timestamp
datos = data.frame(cotizacion = data[[1]], timestamp = data[[6]])
# Arreglamos la fecha
datos$timestamp = as.POSIXct(datos$timestamp, origin = "1970-01-01")
# Lo último que pasamos es lo que devolverá el objeto reactivo
datos
})
output$distPlot <- renderPlotly({
# Cargamos datos reactivos
datos = datos_cotizacion()
g = ggplot(datos, aes(timestamp, cotizacion)) + geom_line() + theme_minimal()
ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
libs = c("httr","shiny","jsonlite","ggplot2","plotly","timetk","dplyr")
sapply(libs, require, character.only = TRUE)
splits <- datos %>%
time_series_split(assess = "3 months", cumulative = TRUE)
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
install.packages("timetk")
install.packages("timetk")
install.packages("timetk")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
remotes::install_github("business-science/timetk")
libs = c("httr","shiny","jsonlite","ggplot2","plotly","forecast","dplyr")
sapply(libs, require, character.only = TRUE)
fit = nnetar(datos$cotizacion)
nnetforecast <- forecast(fit, h = 400, PI = F)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
plot(datos$cotizacion, type = "l")
nnetforecast <- forecast(fit, h = 1000, PI = F)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
datos_red = datos %>%
mutate(fecha = as.Date(timestamp)) %>%
group_by(fecha) %>%
slice(1)
datos %>%
mutate(fecha = as.Date(timestamp))
datos %>%
mutate(fecha = as.Date(datos$timestamp))
libs = c("httr","shiny","jsonlite","ggplot2","plotly","forecast","dplyr","lubridate")
sapply(libs, require, character.only = TRUE)
datos %>%
mutate(fecha = as.Date(ymd_hms(timestamp)))
datos %>%
mutate(fecha = ymd_hms(timestamp))
datos$timestamp[1:10]
as.POSIXct(datos$timestamp, origin = "1970-01-01")
# Arreglamos la fecha
datos$timestamp = as.POSIXct(datos$timestamp, origin = "1970-01-01")
datos %>%
mutate(fecha = as.Date(timestamp))
datos_red = datos %>%
mutate(fecha = as.Date(timestamp)) %>%
group_by(fecha) %>%
slice(1)
plot(datos_red, type ="l")
plot(datos_red$cotizacion, type ="l")
fit = nnetar(datos_red$cotizacion)
nnetforecast <- forecast(fit, h = 30, PI = F)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
nnetforecast <- forecast(fit, h = 30)
fit = nnetar(datos_red$cotizacion)
nnetforecast <- forecast(fit, h = 30)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
fit = nnetar(datos_red$cotizacion, p = 7)
nnetforecast <- forecast(fit, h = 30)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
fit = nnetar(datos_red$cotizacion, p = 30)
nnetforecast <- forecast(fit, h = 30)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
nnetforecast
nnetforecast$m
nnetforecast
autoplot(nnetforecast, x = datos_red$fecha) + theme(plot.title = element_text(hjust = 0.5))
nnetforecast$series
nnetforecast$mean
nnetforecast$fitted
nnetforecast$p
nnetforecast$P
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
tiempo_predecir = 30
nnetforecast <- forecast(fit, h = tiempo_predecir)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
tiempo_predecir = 300
nnetforecast <- forecast(fit, h = tiempo_predecir)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
tiempo_predecir = 100
nnetforecast <- forecast(fit, h = tiempo_predecir)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
lags_considerar = 30
nnetforecast$scalex
nnetforecast$series
nnetforecast$fitted
nnetforecast$residuals
nnetforecast$series
nnetforecast$x
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
libs = c("httr","shiny","jsonlite","ggplot2","plotly","forecast","dplyr","lubridate")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
dim(tiempo_predecir)
dim(datos_red)
dim(nnetforecast$x)
length(nnetforecast$x)
length(nnetforecast$m)
length(nnetforecast$p)
length(nnetforecast$P)
length(nnetforecast$fitted)
length(nnetforecast$series)
length(nnetforecast$mean)
datos_red
datos_red = datos %>%
mutate(fecha = as.Date(timestamp)) %>%
group_by(fecha) %>%
slice(1) %>%
select(-timestamp)
max(datos_red)
max(datos_red$fecha)
max(datos_red$fecha)  +  c(1:tiempo_predecir)
fechas_pred = max(datos_red$fecha)  +  c(1:tiempo_predecir)
datos_red
predicciones = data.frame(
cotizacion = nnetforecast$mean,
fecha = fechas_pred
)
datos_red = datos %>%
mutate(fecha = as.Date(timestamp),
tipo = "Valor Histórico") %>%
group_by(fecha) %>%
slice(1) %>%
select(-timestamp)
predicciones = data.frame(
cotizacion = nnetforecast$mean,
fecha = fechas_pred,
tipo = "Valor predicho"
)
predicciones = data.frame(
cotizacion = nnetforecast$mean,
fecha = fechas_pred,
tipo = "Valor predicho"
)
datos_plot = rbind(datos_red, predicciones)
autoplot(nnetforecast) + theme(plot.title = element_text(hjust = 0.5))
ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line()
datos_plot
nnetforecast$mean
predicciones = data.frame(
cotizacion = nnetforecast$mean,
fecha = fechas_pred,
tipo = "Valor predicho"
)
predicciones
datos_plot = rbind(datos_red, predicciones)
datos_plot
datos_plot = bind_rows(datos_red, predicciones)
datos_plot
ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line()
ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line() +
theme_minimal()+ theme(legend.position = "bottom") +
labs(col = "")
g = ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line() +
theme_minimal()+ theme(legend.position = "bottom") +
labs(col = "")
ggplotly(g)
g = ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line() +
theme_minimal()+ theme(legend.position = "bottom") +
labs(col = "")
ggplotly(g)
library(plotly)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
libs = c("httr","shiny","jsonlite","ggplot2","plotly","forecast","dplyr","lubridate")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
library(plotly)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(plotly)
library(RTools)
install.packages("RTools")
install.packages("rlang", type = "source")
install.packages("rlang", type = "source")
install.packages("rlang", type = "source")
library(plotly)
install.packages("vctrs", type = "source")
install.packages("vctrs", type = "source")
Sys.getenv("R_LIBS_USER")
install.packages("pacman")
library(pacman)
p_unlock()
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(plotly)
install.packages("tidyselect")
install.packages("tidyselect")
libs = c("httr","shiny","jsonlite","ggplot2","plotly","forecast","dplyr","lubridate")
for(i in libs){if (!i %in% installed.packages()) install.packages(i)}
sapply(libs, require, character.only = TRUE)
ggplotly(g)
g = ggplot(datos_plot, aes(fecha, cotizacion, color = tipo)) + geom_line() +
theme_minimal()+ theme(legend.position = "none") +
labs(col = "")
ggplotly(g)
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
shiny::runApp()
